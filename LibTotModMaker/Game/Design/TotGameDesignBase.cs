// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var totGameDesignBase = TotGameDesignBase.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TotGameDesignBase
    {
        [JsonProperty("Id")]
        public string Id { get; set; }

        [JsonProperty("$t")]
        public string T { get; set; }

        [JsonProperty("Journals", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Journals { get; set; }

        [JsonProperty("Dialogs", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Dialogs { get; set; }

        [JsonProperty("Quests", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Quests { get; set; }

        [JsonProperty("Maps", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Maps { get; set; }

        [JsonProperty("InfoEvents", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> InfoEvents { get; set; }

        [JsonProperty("Messages", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Messages { get; set; }

        [JsonProperty("TutorialTips", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> TutorialTips { get; set; }

        [JsonProperty("_phrases", NullValueHandling = NullValueHandling.Ignore)]
        public List<Phrase> Phrases { get; set; }

        [JsonProperty("MapId", NullValueHandling = NullValueHandling.Ignore)]
        public long? MapId { get; set; }

        [JsonProperty("EditorDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string EditorDescription { get; set; }

        [JsonProperty("GroupName", NullValueHandling = NullValueHandling.Ignore)]
        public string GroupName { get; set; }

        [JsonProperty("Type", NullValueHandling = NullValueHandling.Ignore)]
        public long? Type { get; set; }

        [JsonProperty("PopupType", NullValueHandling = NullValueHandling.Ignore)]
        public long? PopupType { get; set; }

        [JsonProperty("IconId", NullValueHandling = NullValueHandling.Ignore)]
        public long? IconId { get; set; }

        [JsonProperty("TaskTemplate", NullValueHandling = NullValueHandling.Ignore)]
        public string TaskTemplate { get; set; }

        [JsonProperty("IsActivatedOnTrigger", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsActivatedOnTrigger { get; set; }

        [JsonProperty("ResourceRewards", NullValueHandling = NullValueHandling.Ignore)]
        public List<ResourceReward> ResourceRewards { get; set; }

        [JsonProperty("JournalEntries", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> JournalEntries { get; set; }

        [JsonProperty("AddToPanelsQueue", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AddToPanelsQueue { get; set; }

        [JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
        public long? Name { get; set; }

        [JsonProperty("BattlesForAchievement", NullValueHandling = NullValueHandling.Ignore)]
        public long? BattlesForAchievement { get; set; }

        [JsonProperty("IsEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [JsonProperty("HasCustomLoadingScreen", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasCustomLoadingScreen { get; set; }

        [JsonProperty("Order", NullValueHandling = NullValueHandling.Ignore)]
        public long? Order { get; set; }

        [JsonProperty("DifficultyLevel", NullValueHandling = NullValueHandling.Ignore)]
        public long? DifficultyLevel { get; set; }

        [JsonProperty("TowerLevel", NullValueHandling = NullValueHandling.Ignore)]
        public long? TowerLevel { get; set; }

        [JsonProperty("TaskTemplates", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> TaskTemplates { get; set; }

        [JsonProperty("IsMandatory", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsMandatory { get; set; }

        [JsonProperty("RewardType", NullValueHandling = NullValueHandling.Ignore)]
        public long? RewardType { get; set; }

        [JsonProperty("RewardSubtype", NullValueHandling = NullValueHandling.Ignore)]
        public long? RewardSubtype { get; set; }

        [JsonProperty("HasFixedOrder", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasFixedOrder { get; set; }

        [JsonProperty("Items", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Items { get; set; }

        [JsonProperty("_items", NullValueHandling = NullValueHandling.Ignore)]
        public List<Item> TotGameDesignBaseItems { get; set; }
    }

    public partial class Phrase
    {
        [JsonProperty("CharacterKey")]
        public string CharacterKey { get; set; }

        [JsonProperty("SpeakerType", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpeakerType { get; set; }

        [JsonProperty("Id")]
        public long Id { get; set; }

        [JsonProperty("Choices", NullValueHandling = NullValueHandling.Ignore)]
        public List<Choice> Choices { get; set; }

        [JsonProperty("RequiredHeroId", NullValueHandling = NullValueHandling.Ignore)]
        public string RequiredHeroId { get; set; }
    }

    public partial class Choice
    {
        [JsonProperty("PartyAlignmentInfluenceIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> PartyAlignmentInfluenceIds { get; set; }

        [JsonProperty("Id")]
        public string Id { get; set; }
    }

    public partial class ResourceReward
    {
        [JsonProperty("t")]
        public long T { get; set; }

        [JsonProperty("a")]
        public long A { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("Id")]
        public long Id { get; set; }

        [JsonProperty("ImagePath", NullValueHandling = NullValueHandling.Ignore)]
        public string ImagePath { get; set; }

        [JsonProperty("ImagePath2", NullValueHandling = NullValueHandling.Ignore)]
        public string ImagePath2 { get; set; }
    }

    public partial class TotGameDesignBase
    {
        public static List<TotGameDesignBase> FromJson(string json) => JsonConvert.DeserializeObject<List<TotGameDesignBase>>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<TotGameDesignBase> self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
